Quantum Computing
lecture #21
2012/04/05
================================================================================

got on time, for once

turning in homework at the end of class ?

Review: order finding

#1. definitions
L = ceil(lg(N))
U|y> = {y\in [0..N-1]: |xy(modN)>
        y\in [N..2^L-1]: |y>}

#2. Set parameters of PE
# of bits of accuracy in phase 2L+1
\epsilon: PE succeeds with prob >= 1-\epsilon if eigenvector is known
t = 2L+1 + ceil(lg(2+1/(2\epsilon)))  // # qubits in top reg

#3.
Step 1 of algo is execution of PE
if PE succeeds |\hat\psi_s| - \phi_s < 1/2 * (2L+1)
  w/ prob >= (1-\epsilon)/(2\lg(N)) for any prime s<r

#4. classical stuff
\hat\phi_s = m/2^t = [a_0..a_n]
  apply continued fractions to it  // n<=t = O(L) = O(lg(N))
get [a_0..a_k] = p_k/q_k (= s'/r')
if |\hat\phi_s = p_k/q_k| <= 1/2 * (2L+1)
then check x^{p_k} = 1(mod N)
  if YES, stop
no YES? repeat from Step 1 (#3.)

--------------------------------------------------------------------------------
Today:

How to compute U^{2^j} efficiently?
  for j=0..t-1
Take y\in {0..N-1}
U^k |y> = U^{k-1} |xy(mod N)>
 = U^{k-2} |x(xy mod N) (mod N)>
 = U^{k-3} |y(x^2 mod N) (mod N)>
 ...
 = U^{0} |y(x^k mod N) (mod N)>

How do we compute U^k ?
use repeated squaring
x(mod N)
x^2(mod N) = (x(mod N))^2 (mod N)
...
x^{2^j} (mod N) = (x^{2^{j-1}} (mod N))^2 (mod N)
depth j
need U^{2^{t-1}}, need depth <= t

We have/need t steps
each step involves a multiplication of two L bit #'s
that has cost O(L^2)
total cost for U^{2^{t-1}} is t*O(L^2) = O(L^3)
But, to get U^{2^{t-1}} we compute all the squares

Cost of order finding
1. cost of PE before F^H = O(L^3)
2. cost of quantum fourier transform on t qubits = t^2 = O(L^2)
3. cost to get s/r = \phi (actually r)
   using continued fractions: O(L^3) // from theorem 5.1
Total: O(L^3)
// kind of weird, because we're combining quantum/classical
cost with lg(N)=L repetitions?
  O(L^4) = O((lg(N))^4)

----------------------------------------
Remarks about boosting the probability
algorithm succeed with probability >= p
repeat k times? 
  fails always with probability (1-p)^k
  succeeds with probability 1-(1-p)^k

if p is tiny?
  eg. p = 1/N, or 1/lg(N)
  then choose p*k=c // constant
  (1-p)^k = ??? = 1/e^c  // from an approximation
  1-(1-p)^k ~ 1/e^c > 1/2
  when p=1/N  then k = c N  is too expensive
  But when p=1/lg(N), k=lg(N)  this is okay

--------------------------------------------------------------------------------
Shor's algorithm (1984)

Factorization
N: huge, composite
WE NEED TO FACTOR IT, FOR CRYPTOGRAPHY

Best classical algorithm known is the Number Field Sieve
cost 2^{c(lg(n))^1/3 (lg lg N)^(2/3)} with c>0

Shor's uses order finding

----------------------------------------
Theorem:

given:
N is composite and 1 <= x <= N that is not a trivial solution of x^2 = 1(mod N)
  ie.
1 < x < N-1
x^2=1(mod N) = x != \pm 1(mod N) = {1 (mod N), -1 (mod N) = N-1}
0 < x-1 < N-2, x+1 < N
So, N does not divide x-1 and x+1

Then the gcd(N, x-1) or gcd(N, x+1) is a factor of N and can be
computed in O((lg N)^3) time using Euclid's algorithm

Proof:
x^2 = 1 (mod N)
<=>
(x-1)(x+1) = l N
and N does not divide x-1 and x+1
(0<x-1<N-2, x+1<N)
So N and x+1 or x-1 must have a common factor
get it with gcd(N,x-1) or gcd(N,x+1)

What about the cost?
if N is prime
then x^2=1 (mod N)s has on trivial solution
Z_n field (?)
  gcd(55,5) = 

// recovering gcd
gcd(a,b)
#1. set a=max(a,b), b=min(a,b)
#2. a = b l + r  // r \in {0..b-1}
#3. if r=0, gcd(a,b)=b
    if r=1, gcd(a,b)=1
    else, gcd(a,b) = gcd(b,r)
this terminates because the sequence of remainders is decreasing (strictly?)
steps to terminate?
  lg(a) = lg(N)
cost of a step, cost of a division on L=ceil(lg N) bits
  O(L^2)
total cost O(L^3) = O((lg N)^3)

In the theorem we use the gcd(N,x-1) (factor 1) to get N/gcd(N,x-1) (factor 2)
example 1:
N=15, x=4
x^2 = 16 = 1(mod 15)
(x-1)(x+1) = 3*5
l*N = 1*15 = 15

example 2:
N=12, x=7
x^2 = 49 = 1(mod 12)
6*8 = 48 = l*N = 4*12
take gcd(12,6) = 6 -> 12/6 = 2
OR   gcd(12,8) = 4 -> 12/4 = 3

fuck it, turning in a diagram that might not be right