Quantum Computing
lecture #14
2012/03/01
================================================================================

hi!!!! ioak
 // cecilia fails at typing dvorak :P

talking about exams
 - open book, open nearly everything
 - you wan't need it
 - bring matlab, and he will laugh at you. ha ha ha
 - answers won't be long
 - a little longer than the quiz
 - he doesn't like numbers

still have to go see prof to get the quiz
 // tues,wed 1-2pm, 502 CS bldg

--------------------------------------------------------------------------------
Review

quantum queries
quantum parallelism
  f: {0 .. 2^n - 1} -> {0,1} // boolean
  U_f|i>|j> = |i>|j\xor f(i)>
U_f = [[X^f(0) 0      0      ...]
       [0      X^f(1) 0      ...]
       [0      0      X^f(2) ...]
       [........................]]

and multi-bit output
  f: {0 .. 2^n - 1} -> {0 .. 2^m - 1}
  U_f |i>|j> = |i>|j \oplus f(i)>
  // where i is n qubits, j is n qubits
  // \oplus is (+ mod 2^m)

  define:
  A_p |j> = |p\oplus j>  // with p, j \in {0 .. 2^m - 1}, \oplus = + mod 2

  and
  U_f |i> |j> = |i> A_{f(i)} |j>
  U_f = [[ A_f(0)  0       0      ...]
         [ 0       A_f(1)  0      ...]
         [ 0       0       A_f(2) ...]
         [...........................]]

then, use H on all the qubits to find all the values of a function
hard thing is extracting the info from these output qubits
  and that's what we're going to see today

--------------------------------------------------------------------------------
Deutsch's ALgorithm

f:{0,1} -> {0,1}
How do we compute f(0)\xor f(1)
  This sounds trivial, but it's a global property
  has to take into account all the function values

classical, and deterministic:
  f(0)\xor f(1) needs 2 function evaluations

quantum, use only one query

algorithm:
  starting with |01> apply an H to both qubits, apply U_f,
    and apply H to the top qubit, and measure it
  PAGE X, FIGURE 1: illustration of the circuit

|\psi_0> = |0>|1>
-> H\tensor H ->
|\psi_1> = (|0>+|1>)(|0>-|1>)/2 = (|0>(|0>-|1>)+|1>(|0>-|1>))/2
-> U_f ->
|\psi_2> = (|0>(|f(0)>-|~f(0)>)+|1>(|f(0)>-|~f(0)>))/2
--------------------
  b/c |00> -> |0>|0\xor f(0)> = |0>|f(0)>
      |01> -> |0>|0\xor f(1)> = |0>|f(1)>
  if f(0)=0, (|f(0)>-|~f(0)>)/\sqrt{2} = H|1>
  if f(0)=1, (|f(0)>-|~f(0)>)/\sqrt{2} = -H|1>
  then
  (|f(0)>-|~f(0)>)/\sqrt{2} = -1^(f(0)) H|1>
  and 
  (|f(1)>-|~f(1)>)/\sqrt{2} = -1^(f(1)) H|1>
--------------------
         = (|0>(-1)^f(0)H|1> + |1>(-1)^f(1)H|1>)/\sqrt{2}
         = (-1)^f(0)(|0> + (-1)^(f(1)-f(0))|1>) H|1>/\sqrt{2}
--------------------
  split by cases
    f(1)-f(0) = 0:
      f(0)\xor f(1) = 0
    f(1)-f(0) = \pm 1:
      f(0)\xor f(1) = 1
  so we can replace (-1)^(f(1)-f(0)) = (-1)^(f(1)\xor f(0))
--------------------
         = (-1)^f(0)(|0> + (-1)^(f(1)\xor f(0))|1>) H|1>/\sqrt{2}
         = (-1)^f(0) H|f(0)\xor f(1)> H|1>
-> H\tenor I ->
|\psi_3> = (-1)^f(0) |f(0)\xor f(1)> H|1>
         --------------------
         = (-1)^f(0) |0> H|1> // if f(0)\xor f(1) = 0
         = (-1)^f(0) |1> H|1> // if f(0)\xor f(1) = 1
--------------------
to get \psi_4
  measure top qubit
  if f(0)\xor f(1) = 0
    {0: p = 1, result = |0> H|1>
     1: p = 0}
  if f(0)\xor f(1) = 1
    {0: p = 0
     1: p = 1, result = |1> H|1> }

so now we have whether f(0)\xor f(1)

doesn't seem like a big deal, but we can deutsch generalized this later

another way to look at the algo:
  U_f|i>|j> = |i>|j\xor f(i)>
  can use f to implement O_f|i> = (-1)^f(i)|i>
    // acting solely on n bits
  how?! this is black magic, obviously
  |i>|0>
  -> I\tensor X ->
  |i>|1>
  -> I\tensor H ->
  |i>(|0>-|1>)/\sqrt{2}
  -> U_f ->
  |i>(|f(i)>-|~f(i)>)/\sqrt{2}
  = |i> (-1)^f(i) H|1>
  -> I\tensor H ->
  (-1)^f(i) |i>|1>
  -> I\tensor X ->
  (-1)^f(i) |i>|0>
so we end up with the same qubit in the 2nd qubit (can use elsewhere)
hence, this is O_f  // aka Phase Kickback
PHASE KICKBACK

--------------------------------------------------------------------------------
Deutsch + Josza algorithm

but first a definition:
f:{0 .. 2^(n-1)} -> {0,1}
  is constant if f(1) = 0 only for i\in {0 .. 2^(n-1)}
              or f(1) = 1 only for i\in {0 .. 2^(n-1)}
  is balanced iff |{i:f(i)=0}| = |{i:f(i)=1}|
                  |A_0| = |A_1|  // different notation
                  // half the values are 0, half are 1

STATEMENT:
given constant or balanced function f
  determine if f is constant, or balanced

classical algorithm
  how many necessary function evaluations? O(2^n)
  necessary function evaluations \geq 2^n/2
    // \geq is sharp: need at least that many, for certain determination
  or we could use >
    // still don't really get "sharp"
    // sharp, it's not a trivial lower bound

quantum algorithm
  PAGE X, FIGURE 2: illustration of the circuit
--------------------
|\psi_0> = |0>^{\tensor n}|1>
 -> H^{\tensor n}\tensor H ->
|\psi_1> = H^{\tensor n}|0>^{\tensor n} (|0>-|1>)/\sqrt{2}
         = 1/2^{n/2} \sum_{j=0}^{2^n-1} |j> (|0>-|1>)/\sqrt{2}
 -> U_f ->
|\psi_2> = 1/2^{n/2} \sum_{j=0}^{2^n-1} |j> (|f(j)>-|~f(j)>)/\sqrt{2}
         = 1/2^{n/2} \sum_{j=0}^{2^n-1} (-1)^f(j) |j> H|1>
-> H^{\tensor n}\tensor H ->
|\psi_3> = 1/2^{n/2} \sum_{j=0}^{2^n-1} (-1)^f(j)
                        (1/2^{n/2} \sum_{k=0}^{2^n-1} (-1)^(j\cdot k} |k> ) H|1>
         = \sum{k=0}^{2^n-1} (1/2^n
             \sum_{j=0}^{2^n-1} (-1)^f(j) (-1)^(j\cdot k))
             |k> H|1>
  // let a_k = (1/2^n \sum_{j=0}^{2^n-1} (-1)^f(j) (-1)^(j\cdot k))
-> Measurement ->
--------------------
  Look at a_0 (amplitude of |0>):
  a_0 = 1/2^n \sum_{j=0}^{2^n-1} (-1)^f(j)
      = {if f is constant: \pm 1,
         if f is balanced: 0}

so if we measure the top qubit
  if f is constant, get outcome 0 with p = 1
    because |a_k|^2 = 0 for k != 0, so all the probability goes to a_0
    a_0 = \pm 1, so collapses to |0>
  if f is balanced, get anything but 0
    if we get any of the other 1 -> 2^n-1 outcomes, it's balanced

|\psi_4> = {f constant: |0>H|1>,
            f balanced: |k>H|1> for k != 0}
  // trying to generalize to constant vs. non-constant?
  // we would need 2^{n/2} queries


afterwards, we can change the balanced proportions to arbitrary amounts (?)

--------------------------------------------------------------------------------
Clam Read Algorithm(?)

this algorithm can fail: probabilistic
basically, we look for whether or not the function is constant or balanced
  classical algorithm

Algorithm:
Select k, generate x_i \in {0 .. 2^n - 1} for i=1..k
  all independently + uniformly
if all f(x_i) = 0, forall i=1..k
   all f(x_i) = 1, forall i=1..k
  then output: f constant
if at least f(x_i) = 0, f(x_j) = 1, forall i=1..k
  then output: f balanced

this algo finds if we get all f(x_i) equal i=1..k
  but f is balanced and k < 2^{n-1}
  A_1 = {i: if f(i)=1}
  A_0 = {i: if f(i)=0}
  p(k, A_i) is probability to get k from A_i
p(1, A_0) = |A_0|/2^n = 1/2
p(k, A_0) = 1/2^k = p(k, A_i)

pr{fail if f balanced after k selections} = p(k,A_0) + p(k,A_1)
                                          = 2/2^k
if we want to win more, we increase k
if we have a target probability of failure \delta:
  k > ciel(log_2(1/\delta) + 1)

next class not midterm or review: fourier transform