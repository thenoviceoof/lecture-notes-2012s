Quantum Computing
lecture #4
2012/01/24
================================================================================
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP
DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP DERP

1st homework due 02/14 (from online)

--------------------------------------------------------------------------------
Review (3rd lecture)

single qubit gates
 - Hadamard: H = 1/\sqrt{2} [[1,1],[1,-1]]
 - Pauli: X = [[0,1][1,0]], Y = [[0, -i], [i, 0]], Z = [[1,0],[0,-1]]
 - Phase gate: S = [[1,0],[0,i]]
 - n/pi gate: T = [[1,0],[0,e^(i\pi/4)]]
with the additional stipulation S = Z^0.5, T = S^0.5

[Z, S, T] shift the phase of a qubit by [pi, pi/2, pi/4] respectively

Representation of U (qubit gate) in different gates
  U = UI = U|0><0| + U|1><1| = |S><0| + |T><1|
  (S and T defined as U|0> etc)
  Y = |?><0| + |??><1| = (i|1>)<0| + (-i|0>)<1| // open from last time

--------------------------------------------------------------------------------
Multiple qubit systems (aka FUCK YEAH TENSORS)

2 qubits, 4 states
state vector is in H (hilbert space) H\in C^4
Labels:
  |00> |01> |10> |11>         // binary repr
  OR
  |0>|0> |0>|1> |1>|0> |1>|1>
  OR
  |0> |1> |2> |3>             // decimal repr

state of 2 qubit system
  a_00|00> + a_01|01> + a_10|10> + a_11|11>
  \sum |a_ij|^2 = 1, a_ij \in C

measurement (of both qubits)
  the usual table:
  outcome  prob      collapsed state
  00       |a_00|^2  |00>
  01       |a_01|^2  |01>
  10       |a_10|^2  |10>
  11       |a_11|^2  |11>

measure first qubit
  project onto possible states, renormalize
  outcome  prob                collapsed state
  0        |a_00|^2+|a_01|^2   (a_00|00> + a_01|01>)/\sqrt{prob}
  1        |a_10|^2+|a_11|^2   (a_10|10> + a_11|11>)/\sqrt{prob}

--------------------------------------------------------------------------------
tensor product
  |y_1> = a_1|0> + b_1|1>
  |y_2> = a_2|0> + b_2|1>

looks like multiplication
  |y_1> \circlecross |y_2> = |y_1y_2> = |y_1|y_2> =
  (a_1|0> + b|1>)(a_2|0> + b_2|1>) =
  a_1a_2|00> + a_1b_2|01> + a_1a_2|10> + b_1b_2|11>
  |0> \circlecross |0> = |00>

NOTE: Not all quantum states can be expressed in tensor product form
  ex. (|00> + |11>)/\sqrt{2} // EPR state (!!!)
  EPR theorem, you know this ("simultaneous" info transfer)
  entangled states aren't covered by tensor product form

--------------------------------------------------------------------------------
Multiple qubit system (n-qubit)
  state vectors are 2^n hilbert space
  2^n basis vectors
  |j> = |\list\delta_i> (decimal = binary form) = |\delta_n-1...\delta_0>

Three questions (left unanswered for now):

1. How do you combine 2 multiple qubit systems?
  |y_1>, |y_2>, different lengths, describe with overall |y>

2. How do we apply operations to the aggregate?
  U|y> = U_1|y_1> ?? U_2|y_2>

3. Coord repr of |y> = |y_m_1...y_0> ?
  |y> = [???]^t (length 2^m)

--------------------------------------------------------------------------------
Tensor Product (Review-ish)

matricies A = [a_mn], B = [b_pq]
C = A \circlecross B
  dim(C) = (mp x nq)
C = [a_ij B] (each a_ij multiplied by entire B, is a p x q size block)

example:
a = [[1 2 3][4 5 6]], B = [[10 0][0 20]]
A \circlecross B =
 [ 10 0  20 0   30 0 
   0  20 0  40  0  60
   40 0  50 0   60 0
   0  80 0  100 0  120 ]

what about vectors?
  treat as (p x 1) matricies
  x = [x_m]^t, y = [y_p]^t
  x \tensor y = [\list_j\list_i x_i y_j]^t
  example:
    x = [1 2 3]^t, y = [10 100]^t
    x\tensor y = [10 100 20 200 30 300]^t
    != y \tensor x = [10 20 30 100 200 300]^t

now with dirac notation!
  using |0> and |1>
  |0>\tensor |0> = [1 0 0 0]^t
  etc...
  example: first, with mult  
    H|0> = (|0> + |1>)/\sqrt{2}
    H|0> \tensor H|0>= 1/2 [1 1 1 1]^t
  example: now with dirac
    1/\sqrt{2}( |0> + |1>) \tensor 1/\sqrt{2}( |0> + |1>) = 
    1/2(|00> + |01> + |10> + |11>) = 
    1/2([1 0 0 0] + [0 1 0 0] + etc...)

tensor k times on H|0>
  \tensor_k H|0> = 1/2^(k/2) [1... (2^k times)]^t
  proof? induction
  do it for k = 2 (done above)
  do for next (arbitrary k)

properties of tensor products (only cover one today)
  associative (NOT commutative)
    A \tensor B \tensor C = (A \tensor B) \tensor C (etc...)
    any size A, B, C
    (dirac notation)
    |y_1> \tensor |y_2> \tensor |y_3> = (|y_1> \tensor |y_2>) \tensor |y_3>
    etc...
    = |y_1y_2y_3> (works b/c associative)

--------------------------------------------------------------------------------
Coord repr for basis vectors (states) in an n qubit system
  |j> = |\delta_n-1...\delta_0>
      = |\delta_n-1..\delta_k> |\delta_k-1...\delta_0> // split
      = |j^(1)> |\j^(0)>
  flexibility comes from associative property (yay!)
  j = \sum_m^n-1 \delta_m 2^m
  j^(1) = \sum_m=k^n-1 \delta_m 2^m
  etc...
  j = j^(1)2^k + j^(0)
  
|1011> = |10> |11> = |2> |3>
       = |1> |011> = |1> |3> // different ways to split binary

Theorem:
State vectors |j> = |\delta_n-1...\delta_0> has coord repr
 = [if i=j, 1 else 0]
Proof:
by Induction
  check for 2 qubits
  assume true for < n qubits
  split the vector:
    1 is in j^(1)+1 position of vector, j^(0)+1 position for j^(0)
    hence, why j = j^(1) 2^k + j^(0)
    = (\sum_k^n-1 \delta_m 2^m-k)2^k + \sum \delta_m 2^m + 1 = j
    and 1 in j+1 position
